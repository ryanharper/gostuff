package main

import (
	"fmt"
	"log"
	"os"
	"path/filepath"

	"gopkg.in/yaml.v3"
	"helm.sh/helm/v3/pkg/action"
	"helm.sh/helm/v3/pkg/chart/loader"
	"helm.sh/helm/v3/pkg/cli"
	"helm.sh/helm/v3/pkg/registry"
	"helm.sh/helm/v3/pkg/repo"
)

type Config struct {
	Helm []struct {
		Repo         string `yaml:"repo"`
		Charts       []struct {
			Name    string `yaml:"name"`
			Version string `yaml:"version"`
		} `yaml:"charts"`
		Destinations []struct {
			Path string `yaml:"path"`
		} `yaml:"destinations"`
	} `yaml:"helm"`
}

func main() {
	// 1. Load Configuration
	config, err := loadConfig("config.yaml")
	if err != nil {
		log.Fatalf("Error loading config: %v", err)
	}

	// 2. Initialize Helm settings
	settings := cli.New()

	// 3. Iterate through configurations
	for _, helmConfig := range config.Helm {
		for _, chart := range helmConfig.Charts {
			for _, destination := range helmConfig.Destinations {

				// --- Create Temporary Directory ---
				tempDir, err := os.MkdirTemp("", "helm-utility-")
				if err != nil {
					log.Fatalf("Failed to create temporary directory: %v", err)
				}
				// Defer cleanup *here*, after pushChart
				defer os.RemoveAll(tempDir)

				// 3a. Pull Chart
				chartPath, err := pullChart(settings, helmConfig.Repo, chart.Name, chart.Version, tempDir) // Pass tempDir
				if err != nil {
					log.Printf("Error pulling chart %s: %v", chart.Name, err)
					continue // Move to the next destination/chart if pull fails
				}
				log.Printf("Pulled chart %s to %s\n", chart.Name, chartPath)

				// 3b. Push Chart
				// Registry client for push
				registryClientPush, err := registry.NewClient(
					registry.ClientOptDebug(settings.Debug),
					registry.ClientOptEnableCache(true),
					registry.ClientOptWriter(os.Stdout),
					registry.ClientOptCredentialsFile(settings.RegistryConfig),
				)
				if err != nil {
					log.Fatalf("Failed to create registry client for push: %v", err)
				}

				//Set action configuration for Push
				actionConfigPush := new(action.Configuration)
				if err := actionConfigPush.Init(settings.RESTClientGetter(), settings.Namespace(), os.Getenv("HELM_DRIVER"), log.Printf); err != nil {
					log.Fatalf("Failed to init action config for push: %v", err)
				}
				actionConfigPush.RegistryClient = registryClientPush

				if err := pushChart(settings, chartPath, destination.Path, actionConfigPush); err != nil {
					log.Printf("Error pushing chart %s to %s: %v", chart.Name, destination.Path, err)
					continue
				}
				log.Printf("Pushed chart %s to %s\n", chart.Name, destination.Path)
			}
		}
	}

	fmt.Println("Helm operations completed.")
}

// loadConfig loads the YAML configuration file.
func loadConfig(filename string) (*Config, error) {
	data, err := os.ReadFile(filename)
	if err != nil {
		return nil, err
	}

	var config Config
	if err := yaml.Unmarshal(data, &config); err != nil {
		return nil, err
	}
	return &config, nil
}

// pullChart pulls the specified chart from the Helm repository.
func pullChart(settings *cli.EnvSettings, repoAlias, chartName, chartVersion string, destDir string) (string, error) {
	// --- Resolve the repository URL ---
	repoFile, err := repo.LoadFile(settings.RepositoryConfig)
	if err != nil {
		return "", fmt.Errorf("failed to load repository config: %w", err)
	}

	repoEntry := repoFile.Get(repoAlias)
	if repoEntry == nil {
		return "", fmt.Errorf("repository '%s' not found in Helm config", repoAlias)
	}
	repoURL := repoEntry.URL

	actionConfig := new(action.Configuration)
	if err := actionConfig.Init(settings.RESTClientGetter(), settings.Namespace(), os.Getenv("HELM_DRIVER"), log.Printf); err != nil {
		return "", fmt.Errorf("failed to initialize action config: %w", err)
	}

	pull := action.NewPullWithOpts(action.WithConfig(actionConfig))
	pull.Settings = settings
	pull.RepoURL = repoURL
	pull.Version = chartVersion
	pull.DestDir = destDir // Use the provided destDir

	// --- Set Credentials ---
	pull.Username = repoEntry.Username
	pull.Password = repoEntry.Password
	pull.PassCredentialsAll = repoEntry.PassCredentialsAll

	result, err := pull.Run(chartName)
	if err != nil {
		return "", fmt.Errorf("failed to pull chart: %w", err)
	}

	// --- Construct Full Path ---
	fullChartPath := filepath.Join(pull.DestDir, result.DownloadedPath)

	return fullChartPath, nil // Return the *full* path
}

// pushChart pushes the chart to the OCI registry.
func pushChart(settings *cli.EnvSettings, chartPath, destination string, actionConfig *action.Configuration) error {
	_, err := loader.Load(chartPath)
	if err != nil {
		return fmt.Errorf("failed to load chart: %w", err)
	}

	push := action.NewPushWithOpts(action.WithPushConfig(actionConfig))
	push.Settings = settings

	_, err = push.Run(chartPath, destination)
	if err != nil {
		return fmt.Errorf("failed to push chart: %w", err)
	}

	return nil
}
