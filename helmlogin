func helmRegistryLogin(registryURL, username, password string) error {
    // ... (other parts of the function to obtain the token remain the same)

    // 3. Store the token in Helm's configuration (config.json)
    configDir := filepath.Join(os.Getenv("HOME"), ".config", "helm", "registry")
    configPath := filepath.Join(configDir, "config.json")

    // Check if the config directory exists, create it if not
    if _, err := os.Stat(configDir); os.IsNotExist(err) {
        if err := os.MkdirAll(configDir, 0755); err != nil {
            return fmt.Errorf("failed to create config directory: %w", err)
        }
    }

    // Read the existing config.json (if it exists)
    var configData map[string]map[string]map[string]string
    if _, err := os.Stat(configPath); err == nil { // File exists
        fileData, err := os.ReadFile(configPath)
        if err != nil {
            return fmt.Errorf("failed to read Helm config: %w", err)
        }
        if err := json.Unmarshal(fileData, &configData); err != nil {
            return fmt.Errorf("failed to unmarshal Helm config: %w", err)
        }
    } else {
        configData = make(map[string]map[string]map[string]string)
    }

    // Update or add the auth entry for the given registry URL
    if configData["auths"] == nil {
        configData["auths"] = make(map[string]map[string]string)
    }
    configData["auths"][registryURL] = map[string]string{"auth": token}

    // Write the updated config back to config.json
    updatedConfigData, err := json.MarshalIndent(configData, "", "    ") // Use indentation for readability
    if err != nil {
        return fmt.Errorf("failed to marshal Helm config: %w", err)
    }

    if err := os.WriteFile(configPath, updatedConfigData, 0644); err != nil {
        return fmt.Errorf("failed to write Helm config: %w", err)
    }

    return nil
}
