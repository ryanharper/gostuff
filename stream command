package main

import (
	"bufio"
	"fmt"
	"io"
	"os"
	"os/exec"
)

func main() {
	// ... (Your templating logic to generate Skaffold config) ...

	// Create the Skaffold command
	cmd := exec.Command("skaffold", "dev") // Replace "dev" with desired command

	// Get the stdin pipe for writing templated config
	stdin, err := cmd.StdinPipe()
	if err != nil {
		fmt.Println("Error getting stdin pipe:", err)
		return
	}

	// Get the stdout and stderr pipes for reading output
	stdout, err := cmd.StdoutPipe()
	if err != nil {
		fmt.Println("Error getting stdout pipe:", err)
		return
	}
	stderr, err := cmd.StderrPipe()
	if err != nil {
		fmt.Println("Error getting stderr pipe:", err)
		return
	}

	// Start the Skaffold command
	if err := cmd.Start(); err != nil {
		fmt.Println("Error starting Skaffold:", err)
		return
	}

	// Write the templated config to stdin
	go func() {
		defer stdin.Close()
		// ... (Write your templated config to stdin) ...
		// Example:
		// io.WriteString(stdin, yourTemplatedConfig)
	}()

	// Stream stdout and stderr to your desired output (e.g., os.Stdout)
	go streamOutput(stdout, os.Stdout)
	go streamOutput(stderr, os.Stderr)

	// Wait for the Skaffold command to complete
	if err := cmd.Wait(); err != nil {
		fmt.Println("Error waiting for Skaffold:", err)
		return
	}
}

// streamOutput reads from a pipe and writes to a writer, preserving color codes
func streamOutput(reader io.Reader, writer io.Writer) {
	scanner := bufio.NewScanner(reader)
	for scanner.Scan() {
		fmt.Fprintln(writer, scanner.Text()) // Preserves color codes
	}
	if err := scanner.Err(); err != nil {
		fmt.Println("Error reading output:", err)
	}
}
