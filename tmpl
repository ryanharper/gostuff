package main

import (
        "fmt"
        "io/ioutil"
        "log"
        "os"
        "strings"
        "text/template"

        "github.com/Masterminds/sprig/v3"
        "gopkg.in/yaml.v2"
)

type Config struct {
        Project       string  `yaml:"project"`
        ConfigVersion int     `yaml:"configVersion"`
        Images        []Image `yaml:"images"`
}

type Image struct {
        Image   string              `yaml:"image"`
        From    string              `yaml:"from"`
        Ansible map[string][]string `yaml:"ansible"`
}

func main() {
        // Read the YAML file
        yamlFile, err := ioutil.ReadFile("config.yaml")
        if err != nil {
                log.Fatalf("Error reading YAML file: %v", err)
        }

        // Parse the YAML content
        var config Config
        err = yaml.Unmarshal(yamlFile, &config)
        if err != nil {
                log.Fatalf("Error parsing YAML: %v", err)
        }

        // Create a new template with Sprig functions
        tmpl := template.New("config").Funcs(sprig.TxtFuncMap())

        // Add custom include function
        tmpl.Funcs(template.FuncMap{
                "include": func(name string, data interface{}) (string, error) {
                        buf := new(strings.Builder)
                        err := tmpl.ExecuteTemplate(buf, name, data)
                        return buf.String(), err
                },
        })

        // Parse the YAML content as a template
        _, err = tmpl.Parse(string(yamlFile))
        if err != nil {
                log.Fatalf("Error parsing template: %v", err)
        }

        // Execute the template
        err = tmpl.Execute(os.Stdout, config)
        if err != nil {
                log.Fatalf("Error executing template: %v", err)
        }

        fmt.Println("\nTemplate rendered successfully!")
}
